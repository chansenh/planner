import * as dateView from './dateView'

class Activity {
    constructor(name,target,current,description){
        this.name = name;
        this.target =target;
        this.current = current;
        this.description = description;
    }
}

class Day {//consists of a list of activties
    constructor(date,actlist){
        this.id = date;
        this.activitylist= actlist;
    }
}

class Stopwatch{
    constructor(id){
        this.id = id;
        this.hour = 0;
        this.minute = 0;
        this.second = 0;
        this.interval=undefined;
        this.endtime = undefined;
        this.paused = 0;
        
    }

    increment(){
        let secout="";
        let minout="";
        let hrout="0";
        //update
        this.second++;

        //determine seconds, update minutes if necessary
        if(this.second==60){
            this.second=0;
            this.minute++;
        }

        //format seconds
        if(this.second<10){
            secout=`0${this.second}`;
        }//^^^^ are exclusive VVVV
        if(this.second>=10){
            secout=`${this.second}`;
        }

        //determine minutes, update hours if necessary
        if(this.minute==60){
            this.minute=0;
            this.hour++;
        }

        //format minutes
        if(this.minute<10){
            minout=`0${this.minute}`;
        }// ^^^^ are exclusive VVVV
        if(this.minute>=10){
            minout=`${this.minute}`;
        }
        const out = `${hrout}:${minout}:${secout}`;
        if (this.endtime==out){
            alert(`Activity ${this.id}, Times up!`);
            
            document.getElementById(this.id).classList.toggle('text-success');
            document.getElementById(this.id).classList.toggle('text-danger');
        }

        return out;
        //console.log(id,`${this.hour}:${this.minute}:${this.second}`);
        //document.getElementById(this.id).innerHTML = out;
    }
    //inserts end time
    start(){//start(id) maybe add default value when initializing
        if(!this.interval || this.paused){
            console.log('sw id is',this.id);
            this.paused=0;//show pause button
            document.getElementById(`start_${this.id.split('_')[1]}`).style = "display: none";//hide start
            document.getElementById(`pause_${this.id.split('_')[1]}`).style = "display: block";
            
            this.endtime=document.getElementById(`end${this.id}`).innerHTML;
            this.interval = setInterval(()=>{
                const time = this.increment();
                document.getElementById(this.id).innerHTML = time;
            }, 1000);

        }
        //this.interval = setInterval(() =>increment(this.id), 1000);
        
        //console.log(document.getElementById(this.id).innerHTML);
        

    }

    pause(){
        if(this.interval){
            this.paused=1;
            document.getElementById(`start_${this.id.split('_')[1]}`).style = "display: block";//show start
            document.getElementById(`pause_${this.id.split('_')[1]}`).style = "display: none";//hide pause
            clearInterval(this.interval);
        }
    }
    stop(){
        if(this.interval){
            clearInterval(this.interval);
            this.reset();
        }
    }
    reset(){
        this.hour = 0;
        this.minute = 0;
        this.second = 0;
        document.getElementById(this.id).innerHTML = `0:00:00`;
        document.getElementById(this.id).classList.add('text-success');
        document.getElementById(this.id).classList.remove('text-danger');
        document.getElementById(`pause_${this.id.split('_')[1]}`).style = "display: none";//hide pause
        document.getElementById(`start_${this.id.split('_')[1]}`).style = "display: block";//show start
        this.interval=null;
    }
    

    updateDOM(){
        console.log(document.getElementById(this.id).innerHTML);
        document.getElementById(this.id).innerHTML = `${this.hour}:${this.minute}:${this.second}`;
    }
    
}

class StopwatchList{
    constructor(){
        this.list=[]
    }
    add(stopwatch){
        this.list.push(stopwatch)
    }
    get(id){
        this.list.forEach((stopwatch,idx)=>{
            if (stopwatch.id==id){
                console.log(stopwatch)
                return stopwatch;
            }
        });
        
    }
}
function dateTableListeners(){
    if (location.pathname=='/index.html'){
        console.log('hi')
        document.querySelectorAll('a').forEach(link =>{
            console.log(link);
            console.log(link.textContent);
        });//addEventListener('click', event=>{
            //console.log(event.target);
        //});
    }
}

function individualDateListeners(){
    
    //console.log(location);
    if (location.pathname=='/date.html'){
        //let swlist = new StopwatchList();
        //stopwatch = new Stopwatch(`time_1`);
        //swlist.add(stopwatch);
        //stopwatch = new Stopwatch(`time_2`);
        //console.log(location);
        //console.log(JSONdata);
        //initialize stopwatch for every activity
        let stopwatches={};
        
        
            
        
        //populate activity list
        //dateView.populateActivities(data.activities);
        //dateView.populateActivities(window.localStorage.getItem('activelist'));
        //***check only new activities show***//
        //dateView.populateDropDownListOfActivities(data.activities);//possibly use local storage to pull from
        //dateView.populateDropDownListOfActivities(window.localStorage.getItem('nonactivelist');

		let stopwatches = {}
		document.querySelectorAll('.date_row').forEach(row =>{
			stopwatches[`stopwatch_${row.id}`]= new Stopwatch(row.id)
		});
        

        document.querySelector('.date_table').addEventListener('click', event=>{
            console.log(event.target);
            
            if(event.target.id && event.target.id.split('_')[0]=='start'){
                console.log(event.target.id)
                //let stopwatch= 
                stopwatches[`stopwatch_${event.target.id.split('_')[1]}`].start();//uses id from event target to link with appropriate stopwatch
                
                //stopwatch.start()
                
                //stopwatch.interval = setInterval(() =>stopwatch.increment(stopwatch.id), 1000);
                //let x = setInterval(sw.increment,1000);
            }
            if(event.target.id && event.target.id.split('_')[0]=='stop'){
                let stopwatch= stopwatches[`stopwatch_${event.target.id.split('_')[1]}`];
                console.log(stopwatch);
                stopwatch.stop();//clearInterval(stopwatch.interval);
                
            }
            if(event.target.id && event.target.id.split('_')[0]=='pause'){
                let stopwatch= stopwatches[`stopwatch_${event.target.id.split('_')[1]}`];
                console.log(stopwatch);
                stopwatch.pause();//clearInterval(stopwatch.interval);
                
            }
            if(event.target.id && event.target.id.split('_')[0]=='remove'){
                //remove on event.target.id.split('_')[1]==the id to remove
                data.activities.forEach(activity =>{
                    if (activity.id == event.target.id.split('_')[1]){
                        dateView.clearActivity(activity);
                    }
                });
                
            }
        })
    }
    

}
console.log(data);
//let JSONdata=undefined;
//fs.readFile(`${__dirname}/data/data.json`, 'utf-8', (err,data) => {
//    JSONdata = data;
//});
//let swlist = new StopwatchList();
dateTableListeners()
individualDateListeners()